package gameActions;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.util.ArrayList;

import javax.swing.Timer;

import CustomRectangle.CRectangle;
import utilityClasses.*;

public class UserGame extends Game {

	/*
	 * int deltaX int deltaY int movementVar
	 * 
	 * int playerX int playerY
	 * 
	 * boolean startGame boolean playing boolean endGame boolean nameEnter
	 * boolean highScores
	 * 
	 * boolean singleDirection sets if only one directin per frame
	 */

	/*
	 * You can override these methods to customize actions
	 * 
	 * drawStart(Graphics2D g)
	 * drawPlaying(Graphics2D g)
	 * drawPaused(Graphics2D g)
	 * drawEnd(Graphics2D g)
	 * up()
	 * down()
	 * left()
	 * right()
	 * upReleased()
	 * downReleased()
	 * rightReleased()
	 * leftReleased()
	 * 
	 */
	
	public int timeSec;
	
	public int[] enemyDirectionValues = {
		
		3, -3
		
	};
	
	
	int enemyDirection = enemyDirectionValues[(int)(2*Math.random() - 0.000001)];
	
	public ArrayList<CRectangle> enemy;
	
	public int enemies = 4;
	
	public UserGame() {

		super();
		setBackground(Color.WHITE);
	}

	/**
	 * Used to draw custom graphics on the screen
	 * Anything in this method will be painted on all screens
	 * unless the painting part is inside of if statements so
	 * that it only drawn when that is true
	 * 
	 */
	public void draw(Graphics2D g) {
		
		g.setColor(Color.BLACK);
		g.setStroke(new BasicStroke(30));
		g.drawRect(outerbox.x, outerbox.y, outerbox.width, outerbox.height);
		g.setStroke(new BasicStroke(2));
		
	}
	/**
	 * Overrides the drawPlaying method in the Control class. So if you want something different than a
	 * box that you can change the size of, change what is in here. Gets called when the screen in repainted
	 */

	public void drawPlaying(Graphics2D g) {
		
		Color myColor = Color.WHITE;
		if (timeSec > 400 && timeSec < 425) {
		
			myColor = Color.RED;
			
		}
		
		if (timeSec > 425 && timeSec < 450) {
			
			myColor = Color.WHITE;
			
		}
		
		if (timeSec > 450 && timeSec < 475) {
			
			myColor = Color.RED;
			
		}
		
		if (timeSec > 475) {
			
			myColor = Color.WHITE;
			
		}
		
		g.setColor(myColor);
		g.fillOval(250, 250, 25, 25);
		
		g.setColor(Color.BLACK);
		g.fillOval(playerX, playerY, 25, 25);
		
		//g.fillRect(20, 30, playerX, playerY);
		g.setColor(Color.RED);
		g.drawString(String.valueOf(getTime()), 5, 12);

		g.setColor(Color.RED);
		for (CRectangle r : enemy) {
			
			g.fillOval(r.x, r.y, r.width, r.height);
			
		}
		
	}
	/**
	 * Gets called constantly. Put code here that will modify the player or other variables
	 * 
	 */
	public void moves() {

		if (upPressed && playerY > 18) {
			deltaY = -movementVar;
		} else if (downPressed && playerY <= 440) {
			deltaY = movementVar;
		} else {
			deltaY = 0;
		}
		
		if (leftPressed && playerX > 18) {
			deltaX = -movementVar;
		} else if (rightPressed && playerX < 460) {
			deltaX = movementVar;
		} else {
			deltaX = 0;
		}
		
		playerX += deltaX;
		playerY += deltaY;

		for (CRectangle r : enemy) {
			
			r.x += r.deltaX;
			r.y += r.deltaY;
			if  (r.x > 457) {
				
				r.deltaX = -r.deltaX;
		
			}
			if  (r.x < 18) {
				
				r.deltaX = -r.deltaX;
		
			}
			if (r.y > 440) {
				
				r.deltaY = -r.deltaY;
		
			}
			if (r.y < 18) {
				
				r.deltaY = -r.deltaY;
		
			}
		}

		timeSec ++;
		if (timeSec == 500) {
			
			enemy.add(new CRectangle(250, 250, 25, 25, enemyDirectionValues[(int)(2*Math.random() - 0.000001)], enemyDirectionValues[(int)(2*Math.random() - 0.000001)]));
			timeSec = 0;
					
		}
		
	}
	/**
	 * This should return a boolean indicating if the player is dead or not. By default returns false
	 */
	public boolean checkIfDead() {
		
		for (CRectangle r : enemy) {
			
			if (r.x > (playerX - 20) && r.x < (playerX + 20) && r.y > (playerY - 20) && r.y < (playerY + 20)) {
				
				return true;
				
			}
		

		}
		
		return false;
		
	}
	
	/**
	 * Gets called when the game is reset and you start over. Also calls the setup method. Can be used
	 * so make sure everything is cleared so the game starts new
	 */
	public void reset() {

		setup();

	}
/**
 	* Sets up the game before it starts. Sets all variables needed to any certain values
 */
	@Override
	public void setup() {

		movementVar = 5;
		deltaX = movementVar;
		deltaY = movementVar;
		timeSec = 0;
		playerX = 250;
		playerY = 50;
		enemy = new ArrayList<CRectangle>();
		
		//for (int i = 0; i < enemies; i++) {
			
			//enemy.add(new CRectangle(250, 250, 25, 25, true));
			
		//}
		
		enemy.add(new CRectangle(250, 250, 25, 25, 3, -3));
		enemy.add(new CRectangle(250, 250, 25, 25, 3, 3));
		enemy.add(new CRectangle(250, 250, 25, 25, -3, 3));
		enemy.add(new CRectangle(250, 250, 25, 25, -3, -3));
		
	}

private void fillOval(int i, int j, int k, int l) {
	// TODO Auto-generated method stub
	
}

@Override
public String getGameName() {
	// TODO Auto-generated method stub
	return "Dodge";
}

@Override
public int getScore() {
	// TODO Auto-generated method stub
	return getTime();
}





}
